<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <!-- Checks whether files end with a new line -->
    <!-- http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>
    <module name="Translation"/>
    <module name="UniqueProperties"/>

    <!-- Checks that TODOs & FIXMEs are named and have content -->
    <!-- http://checkstyle.sourceforge.net/config_misc.html#TodoComment -->
    <module name="RegexpSingleline">
        <property name="format" value="((//.*)|(\*.*))TODO(?!(\([a-z]{2,20}\): .+))"/>
        <property name="message" value='TODOs should be named and have content: e.g. "TODO(username): Change to..."'/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="((//.*)|(\*.*))FIXME(?!(\([a-z]{2,20}\): .+))"/>
        <property name="message" value='FIXMEs should be named and have content: e.g. "FIXME(username): A fixme desc."'/>
    </module>

    <module name="TreeWalker">
        <property name="tabWidth" value="4"/> <!-- Default tab size for java files -->

        <!-- Checks for imports -->
        <!-- http://checkstyle.sourceforge.net/config_imports.html -->

        <!-- Checks for imports from a set of illegal packages -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <!-- Checks for redundant import statements -->
        <module name="RedundantImport"/>
        <!-- Checks for unused import statements -->
        <module name="UnusedImports"/>

        <!-- Checks for naming conventions -->
        <!-- http://checkstyle.sf.net/config_naming.html -->

        <module name="AbbreviationAsWordInName">
            <property name="tokens" value="CLASS_DEF,PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF"/>
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="allowedAbbreviations" value="XML,URL,MQ,UTF,DB,EM"/>
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]{1,5}$"/>
        </module>

        <module name="CatchParameterName"/>
        <module name="ConstantName"/>
        <module name="InterfaceTypeParameterName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="MethodTypeParameterName"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Whitespace check -->
        <!-- http://checkstyle.sourceforge.net/config_whitespace.html -->

        <!-- Checks that there are no whitespaces around the Generic tokens < and > -->
        <module name="GenericWhitespace"/>
        <!-- Checks no padding of an empty for initializer -->
        <module name="EmptyForInitializerPad"/>
        <!-- Checks no padding of an empty for iterator -->
        <module name="EmptyForIteratorPad"/>
        <!-- Checks no padding between the identifier of a method definition / call -->
        <module name="MethodParamPad"/>
        <!-- Checks that there is no whitespace after a token -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="allowLineBreaks" value="false"/>
        </module>
        <!-- Checks that there is no whitespace before a token -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="false"/>
        </module>
        <!-- Checks the policy on the padding of parentheses -->
        <module name="ParenPad"/>
        <!-- Checks the policy on the padding of parentheses for typecasts -->
        <module name="TypecastParenPad"/>
        <!-- Checks that a token (coma, semi, typecast) is followed by whitespace. -->
        <module name="WhitespaceAfter"/>
        <!-- Checks that a token (assign, bor, etc.) is surrounded by whitespace -->
        <module name="WhitespaceAround"/>
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="true"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <!-- Checks that a comma is at the previous line -->
        <module name="SeparatorWrapCheck">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="eol"/>
        </module>
        <!-- Checks that a dot is at the new line -->
        <module name="SeparatorWrapCheck">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <!-- Checks for size violations -->
        <!-- http://checkstyle.sf.net/config_sizes.html -->

        <!-- Modifiers -->
        <!-- http://checkstyle.sourceforge.net/config_modifier.html -->

        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification -->
        <module name="ModifierOrder"/>
        <!-- Checks for redundant modifiers -->
        <module name="RedundantModifier"/>

        <!-- Checks for blocks -->
        <!-- http://checkstyle.sf.net/config_blocks.html -->

        <!-- Checks for empty blocks -->
        <module name="EmptyBlock"/>
        <!-- Checks for the placement of left curly braces ('{') for code blocks -->
        <module name="LeftCurly"/>
        <!-- Checks for braces around code blocks -->
        <module name="NeedBraces"/>
        <!-- Checks the placement of right curly braces ('}') for else, try, catch blocks are on the same line -->
        <module name="RightCurly"/>
        <!-- Checks nested blocks, i.e. blocks that are used freely in the code -->
        <module name="AvoidNestedBlocks"/>
        <!-- Checks for empty catch blocks -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="ignore|ignored"/>
        </module>

        <!-- Checks for common coding problems -->
        <!-- http://checkstyle.sf.net/config_coding.html -->

        <!-- Checks that String literals are on the left side of an equals() comparison -->
        <module name="EqualsAvoidNull"/>
        <!-- Checks that a local variable does not shadow a field that is defined in the same class -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- Check that java.lang.Boolean is not directly instantiated -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <!-- Checks that there are no "magic numbers" -->

        <!--<module name="MagicNumber">-->
        <!--<property name="severity" value="warning"/>-->
        <!--<property name="ignoreFieldDeclaration" value="true"/>-->
        <!--<property name="ignoreAnnotation" value="true"/>-->
        <!--</module>-->

        <!-- Checks that switch statement has "default" clause -->
        <module name="MissingSwitchDefault"/>
        <!-- Checks for overly complicated boolean expressions -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Checks for overly complicated boolean return statements -->
        <module name="SimplifyBooleanReturn"/>
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder">
            <property name="ignoreConstructors" value="true"/> <!-- lombok builders-->
        </module>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough">
            <property name="severity" value="warning"/>
        </module>
        <module name="IllegalToken"/>
        <module name="IllegalTokenText"/>
        <module name="IllegalType"/>
        <module name="InnerAssignment"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="5"/>
        </module>
        <module name="NestedTryDepth"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="PackageDeclaration"/>
        <module name="StringLiteralEquality"/>
        <module name="UnnecessaryParentheses"/>
        <module name="VariableDeclarationUsageDistance">
            <property name="severity" value="warning"/>
        </module>


        <!-- Checks for class design -->
        <!-- http://checkstyle.sf.net/config_design.html -->

        <!-- Checks visibility of class members -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="publicMemberPattern" value="^(serialVersionUID|jUnitTestName)$"/>
        </module>
        <!-- Checks that a class which has only private constructors is declared as final -->
        <!--<module name="FinalClass"/>-->
        <!-- It is inappropriate to define an interface that does not contain any methods but only constants -->
        <module name="InterfaceIsType">
            <property name="allowMarkerInterfaces" value="true"/>
            <property name="severity" value="warning"/>
        </module>
        <!-- Make sure that utility classes (only static methods/fields) do not have a public constructor -->
        <!--<module name="HideUtilityClassConstructor"/>-->
        <module name="ThrowsCount"/>
        <module name="OneTopLevelClass"/>
        <!--		<module name="MutableException"/>-->
        <module name="InnerTypeLast"/>

        <!-- Annotations -->
        <!-- http://checkstyle.sourceforge.net/config_annotation.html -->

        <!-- This check controls the style with the usage of annotations -->
        <module name="AnnotationUseStyle"/>
        <!-- Verifies that both java.lang.Deprecated and @deprecated Javadoc tag is present when either is present -->
        <module name="MissingDeprecated"/>
        <!-- Verifies that java.lang.Override is present when @inheritDoc Javadoc tag is present -->
        <module name="MissingOverride"/>
        <module name="AnnotationUseStyle"/>
        <module name="PackageAnnotation"/>
        <module name="SuppressWarnings">
            <property name="format" value="^unchecked$|^unused$"/>
            <property name="tokens"
                      value="CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,
							ENUM_CONSTANT_DEF,METHOD_DEF,CTOR_DEF"/>
        </module>

        <!-- Metrics -->
        <!-- http://checkstyle.sourceforge.net/config_metrics.html -->

        <!-- Checks cyclomatic complexity against a specified limit of 10 -->
        <module name="CyclomaticComplexity">
            <property name="severity" value="warning"/>
            <property name="max" value="50"/>
        </module>
        <!-- Checks the number (200) of possible execution paths through a function -->
        <module name="NPathComplexity">
            <property name="severity" value="warning"/>
        </module>
        <module name="BooleanExpressionComplexity">
            <property name="severity" value="warning"/>
        </module>
        <module name="ClassDataAbstractionCoupling">
            <property name="severity" value="warning"/>
        </module>
        <module name="ClassFanOutComplexityCheck">
            <property name="severity" value="warning"/>
        </module>

        <!-- Miscellaneous checks -->
        <!-- http://checkstyle.sf.net/config_misc.html -->

        <!-- Checks that long constants are defined with an upper ell -->
        <module name="UpperEll"/>
        <!-- Checks the style of array type definitions -->
        <module name="ArrayTypeStyle"/>
        <module name="DescendantToken"/>
        <module name="OuterTypeFilename"/>

        <module name="CommentsIndentation">
            <property name="severity" value="warning"/>
        </module>
        <module name="TodoComment">
            <property name="severity" value="warning"/>
        </module>

    </module>
</module>
